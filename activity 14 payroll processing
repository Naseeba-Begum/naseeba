#include<stdio.h>
#include<string.h>
typedef struct
{
     char name[50];
     int tot_minutes;
}timecards;

typedef struct
{
    char names[50];
    float wage_hr;
    float worked_hrs;
    float minimum_worked;
    float total_time;
    float gross_pay;
}payroll;

int input_n_value()
{
    int n;
    printf("enter the number of employees here:");
    scanf("%d",&n);
    if(n<=20)
        return n;
    else
        printf("the given input is wrong");
    return 0;
}
int input_m_value()
{
    int m;
    printf("enter the number of time cards :");
    scanf("%d",&m);
    return m;
}
payroll input_employee()
{
    payroll p;
    printf("enter the employees name and employees hourly wage :");
    scanf("%s %f",p.names,&p.wage_hr);
    return p;
}

void input_n_employee(int n , payroll p[n])
{
    for(int i=0;i<n;i++)
    {
        p[i]=input_employee();
    } 
}
timecards input_timecards()
{
    timecards t;
    printf("enter the employees name and minutes employee has worked :");
    scanf("%s %d", t.name , &t.tot_minutes);
    return t;
}

void input_m_timecards(int m , timecards t[m])
{
    for(int i=0;i<m;i++)
    {
        t[i]=input_timecards();
    }
}

payroll compute(int m , timecards t[m] , payroll p)
{
p.minimum_worked=0;
for(int i=0;i<m;i++)
{
    if(strcmp(p.names ,t[i].name)==0)
    {
        p.minimum_worked+=t[i].tot_minutes;
    }
}
p.worked_hrs=p.minimum_worked/60;
if(p.worked_hrs<=40)
{
    p.gross_pay=p.worked_hrs*p.wage_hr;
}
else
{
    p.gross_pay=40*p.wage_hr+(p.worked_hrs-40)*1.5*p.wage_hr;
}
return p;
}

void compute_n_values(int n , int m , timecards t[m] , payroll p[n])
{
    for(int i=0;i<n;i++)
    {
        p[i]=compute(m,t,p[i]);
    }
}
void output(payroll *p)
{
    printf("\n %s: %2.f hours , $%.2f", p->names , p->worked_hrs,p->gross_pay);
}
void output_n_employee(int n , payroll p[n])
{
    for(int i=0;i<n;i++)
    {
        output(&p[i]);
    }
}

int main()
{
	int n;
	n = input_n_value();
	payroll p[n];
	input_n_employee(n,p);
	int m;
	m=input_m_value(); 
	timecards t[m];
	input_m_timecards(m,t);
    compute_n_values(n,m,t,p);
	
	output_n_employee(n,p);
	return 0;
}
